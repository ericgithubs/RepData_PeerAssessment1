getwd()
activity <- read.csv(unz(activity.zip))
activity <- read.csv(unz("activity.zip"))
activity <- read.csv(unz("activity.zip", "activity.csv"))
head(activity)
str(activity)
stepsperday <- tapply(activity$steps, activity$date, sum)
stepsperday <- tapply(activity$steps, activity$date, sum(na.rm = TRUE))
??tapply
stepsperday <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
stepsperday <- tapply(activity$steps, activity$date, sum)
stepsperday <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
stepsperday <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
hist(stepsperday)
?hist
hist(stepsperday, breaks = 20)
hist(stepsperday, breaks = 10)
activity_no_na <- activity[!is.na(activity$steps),]
activity_no_na <- activity[!is.na(activity$steps),]
stepsperday <- tapply(activity_no_na$steps, activity_no_na$date, sum, na.rm = TRUE)
hist(stepsperday, breaks = 10)
?hist
View(activity_no_na)
activity_no_na <- activity[!is.na(activity$steps),]
stepsperday <- tapply(activity_no_na$steps, activity_no_na$date, sum)
stepsperday
View(activity_no_na)
View(activity_no_na)
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity_no_na <- activity[!is.na(activity$steps),]
stepsperday <- tapply(activity_no_na$steps, activity_no_na$date, sum, na.rm = TRUE)
activity_no_na$date
activity_no_na$date[1:10]
str(activity_no_na$date)
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity_no_na <- activity[!is.na(activity$steps),]
stepsperint <- tapply(activity_no_na$steps, activity_no_na$interval, sum, na.rm = TRUE)
stepsperint
stepsperint <- tapply(activity_no_na$steps, activity_no_na$interval, mean, na.rm = TRUE)
plot(stepsperint, type = "l", xlab = "Interval", ylab = "Steps")
?match
?index
match(max(stepsperint),stepsperint)
str(stepsperint)
stepsperint[280:288]
class(stepsperint)
stepsperint <- as.data.frame(stepsperint)
stepsperint <- tapply(activity_no_na$steps, activity_no_na$interval, mean, na.rm = TRUE)
stepsperint$
stepsperint[1]
plot(stepsperint, stepsperint, type = "l", xlab = "Interval", ylab = "Steps")
?"array"
stepsperint <- as.array(stepsperint)
stepsperint[1]
stepsperint[]1,
stepsperint[1,]
?array
dimention(stepsperint)
summary(steps)
summary(stepsperint)
attr(stepsperint)
attr(stepsperint,dm)
attr(stepsperint,dim)
?aggregate
stepsperint <- aggregate(activity_no_na, by = activity_no_na$interval, mean, na.rm = TRUE)
stepsperint <- aggregate(activity_no_na, by = list(interval), mean, na.rm = TRUE)
stepsperint <- aggregate(activity_no_na, by = list(interval), mean)
stepsperint <- aggregate(steps ~ interval, data = activity_no_na, mean)
View(stepsperint)
plot(stepsperint,  type = "l", xlab = "Interval", ylab = "Steps")
match(max(stepsperint),stepsperint)
match(max(stepsperint$steps),stepsperint$steps)
stepsperint$interval[match(max(stepsperint$steps),stepsperint$steps)]
?print
print("aaaa")
?sprintf
hi_int <- stepsperint$interval[match(max(stepsperint$steps),stepsperint$steps)]
sprintf("The 5-min interval that has the highest steps is %d", hi_int)
total_na <- sum(is.na(activity$steps))
total_na <- mean(is.na(activity$steps))
sum(is.na(activity$interval))
sum(is.na(activity$date))
library(swirl)
swirl()
a <- c(2,3,4,NA,4,NA)
a[is.na()]
a[is.na(a)]
?which
?match
for (i in 1:8){}
for (i in 1:9){
if is.na(i)
print i
}
for (i in 1:9){
if is.na(i)
print i
}
for (i in 1:9){
if is.na(i)
i
}
for (i in 1:9){
print i
}
for (i in 1:9){
i
}
for (i in 1:9){
i
}
a=c(2,4,6,8,1,3,5,7,9)
for (i in 1:9){
a[i]
}
a=c(2,4,6,8,1,3,5,7,9)
for (i in 1:9){
print a[i]
}
a=c(2,4,6,8,1,3,5,7,9)
for (i in 1:9){
print(a[i])
}
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity_no_na <- activity[!is.na(activity$steps),]
stepsperday <- tapply(activity_no_na$steps, activity_no_na$date, sum, na.rm = TRUE)
hist(stepsperday, breaks = 10, xlab = "Total steps per day", ylab = "Count of days")
mean(stepsperday, na.rm = TRUE)
median(stepsperday, na.rm = TRUE)
activity_no_na <- activity[!is.na(activity$steps),]
stepsperint <- aggregate(steps ~ interval, data = activity_no_na, mean)
plot(stepsperint,  type = "l", xlab = "Interval", ylab = "Steps")
hi_int <- stepsperint$interval[match(max(stepsperint$steps),stepsperint$steps)]
sprintf("The 5-min interval that has the highest steps is %d", hi_int)
total_na <- sum(is.na(activity$steps))
sprintf("The total number of missing values in the dataset is %d", total_na)
for(i in 1:nrow(activity)){
if (is.na(activity$steps[i])){
activity$steps[i] <-
stepsperint$steps[match(activity$interval[i],stepsperint$interval)]
}
}
View(activity)
View(activity)
sum(is.na(activity))
stepsperday_nona <- tapply(activity$steps, activity$date, sum)
hist(stepsperday_nona, breaks = 10, xlab = "Total steps per day", ylab = "Count of days")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Read the unzipped data file from "activity.zip" as a data frame in activity
```{r}
activity <- read.csv(unz("activity.zip", "activity.csv"))
```
## What is mean total number of steps taken per day?
1. The missing values are removed
2. Total steps per day are calculated and store in "stepsperday"
3. A histogram is generated with 10 breaks
```{r}
activity_no_na <- activity[!is.na(activity$steps),]
stepsperday <- tapply(activity_no_na$steps, activity_no_na$date, sum, na.rm = TRUE)
hist(stepsperday, breaks = 10, xlab = "Total steps per day", ylab = "Count of days")
mean(stepsperday, na.rm = TRUE)
median(stepsperday, na.rm = TRUE)
```
## What is the average daily activity pattern?
```{r}
activity_no_na <- activity[!is.na(activity$steps),]
stepsperint <- aggregate(steps ~ interval, data = activity_no_na, mean)
plot(stepsperint,  type = "l", xlab = "Interval", ylab = "Steps")
hi_int <- stepsperint$interval[match(max(stepsperint$steps),stepsperint$steps)]
sprintf("The 5-min interval that has the highest steps is %d", hi_int)
```
## Imputing missing values
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
total_na <- sum(is.na(activity$steps))
sprintf("The total number of missing values in the dataset is %d", total_na)
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
The strategy here is to use the mean for that 5-minute interval across all days to fill in missing values. The per interval mean obtained in the last question
```{r}
for(i in 1:nrow(activity)){
if (is.na(activity$steps[i])){
activity$steps[i] <-
stepsperint$steps[match(activity$interval[i],stepsperint$interval)]
}
}
stepsperday_nona <- tapply(activity$steps, activity$date, sum)
hist(stepsperday_nona, breaks = 10, xlab = "Total steps per day", ylab = "Count of days")
mean(stepsperday_nona)
median(stepsperday_nona)
```
The results show that there are no difference between these mean and median data and the data obtained before filling in the missing values. This is because: 1. we removed NAs from the original data to generate the first histogram; 2. we used mean for that 5-minute interval from valid data to fill out the NAs so that the mean is not changed.
## Are there differences in activity patterns between weekdays and weekends?
stepsperday_nona
library(dplyr)
?mutate
mutate(activity, weekday <- weekdays(activity$date))
str(activity$date)
activity <- read.csv(unz("activity.zip", "activity.csv"))
str(activity$date)
summary(activity)
class(activity$date)
?as.Date
mutate(activity, weekday <- weekdays(as.Date(activity$date)))
activity <- mutate(activity, weekday <- weekdays(as.Date(activity$date)))
?weekdays
activity <- mutate(activity, weekday <- isWeekday(activity$date, wday=1:5)
View(activity)
activity <- mutate(activity, weekday <- isWeekday(activity$date, wday=1:5)
)
library(timeDate)
activity <- mutate(activity, weekday <- isWeekday(activity$date, wday=1:5))
install.packages("timeDate")
activity <- mutate(activity, weekday <- isWeekday(activity$date, wday=1:5))
?timeDate
??timeDate
activity$weekday <- weekdays(as.Date(activity$date)))
activity$weekday <- weekdays(as.Date(activity$date))
View(activity)
activity <- read.csv(unz("activity.zip", "activity.csv"))
activity$weekday <- as.factor(ifelse(weekday(as.Date(activity$date)) %in%
c("Saturday","Sunday"), "Weekend", "Weekday"))
activity$weekday <- as.factor(ifelse(weekdays(as.Date(activity$date)) %in%
c("Saturday","Sunday"), "Weekend", "Weekday"))
View(activity)
activity$weekday <- weekdays(as.Date(activity$date))
?aggregate
stepsmean <- aggregate(steps ~ interval + weekday, data = activity, mean)
View(stepsmean)
activity$weekday <- as.factor(ifelse(weekdays(as.Date(activity$date)) %in%
c("Saturday","Sunday"), "Weekend", "Weekday"))
stepsmean <- aggregate(steps ~ interval + weekday, data = activity, mean)
View(stepsmean)
?facet
??facet
?qplot
library(ggplot2)
?facet
?qplot
qplot(interval, steps, stepsmean, facet = weekday)
qplot(x = interval, y = steps, stepsmean, facet = weekday)
qplot(x = interval, y = steps, data = stepsmean, facet = weekday)
qplot(x = interval, y = steps, data = stepsmean, facet = weekday, type ="l")
qplot(x = interval, y = steps, data = stepsmean, facet = . ~ weekday, type ="l")
qplot(x = interval, y = steps, data = stepsmean, facets = . ~ weekday, type ="l")
qplot(x = interval, y = steps, data = stepsmean, facets = weekday ~ ., type ="l")
?geom
??geom
qplot(x = interval, y = steps, data = stepsmean, facets = weekday ~ ., geom = "line")
qplot(x = interval, y = steps, data = stepsmean, facets = weekday ~ ., geom = "line"
ylab ="Interval", xlab = "Number of Steps")
qplot(x = interval, y = steps, data = stepsmean, facets = weekday ~ ., geom = "line",
ylab ="Interval", xlab = "Number of Steps")
stepsmean <- aggregate(steps ~ interval + weekday, data = activity, mean)
qplot(x = interval, y = steps, data = stepsmean, facets = weekday ~ ., geom = "line",
xlab ="Interval", ylab = "Number of Steps")
